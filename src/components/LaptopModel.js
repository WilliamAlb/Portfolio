/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Aullwen (https://sketchfab.com/Aullwen)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/laptop-7d870e900889481395b4a575b9fa8c3e
title: Laptop
*/

import React, { useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useSpring, a, config } from "@react-spring/three";

export default function LaptopModel({ ...props }) {
  const [open, setOpen] = useState(false);
  const group = useRef();
  const { nodes, materials } = useGLTF("models/laptop/scene.gltf");
  const openScreen = useSpring({
    to: async (next) => {
      await next({ rotation: [-2, 0, Math.PI] });
    },
    delay: 500,
    from: {
      rotation: [0, 0, Math.PI],
    },
    config: config.slow,
  });
  const rotateIn = useSpring({
    to: async (next) => {
      await next({ rotation: [0, 2 * Math.PI, 0], position: [1.5, 0, 0] })
      await next({ rotation: [0, 2 * Math.PI, 0], position: [0, 0, 0] });
    },
    from: {
      rotation: [0, Math.PI, 0],
      position: [0, 0, -10],
    },
    config: {
      tension: 60,
    },
  });

  return (
    <a.group
      ref={group}
      {...props}
      dispose={null}
      rotation={rotateIn.rotation}
      position={rotateIn.position}
      onClick={() => setOpen(!open)}
      castShadow
      receiveShadow
    >
      <group
        rotation={[-Math.PI / 2 + 0.3, 0.1, 0.5]}
        scale={14}
        position={[-2, -1, 0]}
      >
        <a.mesh
          geometry={nodes.Frame_ComputerFrame_0.geometry}
          material={materials.ComputerFrame}
          castShadow
          receiveShadow
        />
        <a.mesh
          geometry={nodes.Screen_ComputerScreen_0.geometry}
          material={materials.ComputerScreen}
          rotation={openScreen.rotation}
          position={[0, 0.1, 0]}
          castShadow
          receiveShadow
        />
      </group>
    </a.group>
  );
}

useGLTF.preload("/scene.gltf");
